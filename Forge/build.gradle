architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        mixinConfig "${mod_id}.mixins.json"
        mixinConfig "${mod_id}-common.mixins.json"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Forge Dependencies
    modImplementation "com.cerbon:cerbons_api-forge-${minecraft_version}:${cerbons_api_version}"

    implementation include("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")

    // Useful Mods
    modCompileOnlyApi "mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"
    modRuntimeOnly ("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive false }

    //modImplementation "curse.maven:jade-324717:${jade_version_forge}"

    // Architecture
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
    atAccessWideners.add("${mod_id}.accesswidener")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

configurations.configureEach {
    resolutionStrategy.force("net.sf.jopt-simple:jopt-simple:5.0.4")
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
